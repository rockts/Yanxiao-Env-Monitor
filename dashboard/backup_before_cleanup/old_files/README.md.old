# 烟铺小学智慧校园环境监测系统

## 项目概述

烟铺小学智慧校园环境监测系统是一个大屏展示项目，实时监控并展示校园环境数据，包括温度、湿度、空气质量、噪音、天气以及实时摄像头监控画面等。该系统通过 MQTT 协议接收各传感器数据，以直观的界面呈现给用户，并提供基于数据的智能环境建议。

## 功能特点

- **实时数据监测**：显示环境温度、湿度、AQI 空气质量指数、eCO2、TVOC、紫外线指数、噪音等数据
- **实时图表**：以时间序列图表展示温度、湿度、噪音的历史变化趋势
- **摄像头监控**：实时显示校园监控画面
- **天气信息**：通过第三方 API 获取并展示当前天气状况、风速等信息
- **智能建议**：基于监测数据提供环境改善的智能建议
- **模拟模式**：在无传感器或测试环境中，可启用模拟数据模式

## 系统组件

### 1. Python 仪表盘

- 负责数据处理、MQTT 通信和基础数据显示
- 基于 Python 和 Tkinter 构建

### 2. Mind+大屏

- 负责数据可视化和美观界面展示
- 基于 Mind+平台构建
- 文件位置：`data/烟小智慧环境监测物联网大屏.mpdb`

## 系统要求

- Python 3.8 或更高版本
- 依赖库：
  - paho-mqtt：MQTT 通信
  - Pillow (PIL)：图像处理
  - matplotlib：数据可视化图表
  - tkinter：UI 界面（Python 标准库）
  - requests：API 网络请求
- Mind+软件（用于运行大屏文件）

## 安装与运行

1. **安装依赖**：

   ```bash
   pip install paho-mqtt Pillow matplotlib requests
   ```

2. **运行方式**：

   - 使用启动脚本（推荐）：
     ```bash
     ./start_dashboard.sh
     ```
   - 脚本选项：

     - `--start-all`：同时启动主面板和测试数据发送程序
     - `--start-dashboard`：仅启动主面板程序
     - `--start-test-data`：仅启动测试数据发送程序
     - `--mqtt-server=<地址>`：指定 MQTT 服务器地址
     - `--mqtt-port=<端口号>`：指定 MQTT 服务器端口

   - 或直接运行主程序：
     ```bash
     python main_all_fixed.py
     ```

3. **测试数据模拟**：
   如果没有真实传感器数据，可运行模拟数据发送程序：
   ```bash
   python send_test_data.py
   ```

## MQTT 主题结构

系统通过以下 MQTT 主题接收数据：

| 主题               | 描述               | 数据格式                                     |
| ------------------ | ------------------ | -------------------------------------------- |
| `siot/环境温度`    | 环境温度数据       | 数值（°C）                                   |
| `siot/环境湿度`    | 环境湿度数据       | 数值（%RH）                                  |
| `siot/aqi`         | 空气质量指数       | 数值                                         |
| `siot/tvoc`        | 总挥发性有机化合物 | 数值（ppb）                                  |
| `siot/eco2`        | 等效二氧化碳浓度   | 数值（ppm）                                  |
| `siot/紫外线指数`  | 紫外线强度指数     | 数值                                         |
| `siot/uv风险等级`  | 紫外线风险等级     | 文本（低/中/高）                             |
| `siot/噪音`        | 噪音水平           | 数值（dB）                                   |
| `sc/camera/stream` | 摄像头画面流       | Base64 编码图像或 JSON 对象（含 image 字段） |
| `sc/weather/data`  | 天气数据           | JSON 对象                                    |

### 数据格式示例

- **传感器数据**：直接发送数值或字符串，如 `"25.6"` 或 `"低"`
- **摄像头数据**：
  ```json
  {
   "image": "base64编码的图像数据..."
  }
  ```
- **天气数据**：
  ```json
  {
   "weather": [{ "description": "晴天", "icon": "01d" }],
   "main": {
    "temp": 25.6,
    "humidity": 65
   },
   "wind": {
    "speed": 3.1
   }
  }
  ```

## 调试与故障排除

- **MQTT 连接失败**：

  - 检查 MQTT 服务器是否正常运行
  - 验证用户名密码配置（默认：siot/dfrobot）
  - 确认网络连接状态和防火墙设置

- **图像显示问题**：

  - 确保已正确安装 Pillow 库
  - 检查相机主题数据是否为有效的 Base64 编码图像

- **图表不显示**：
  - 确保已安装 matplotlib
  - 检查数据格式是否正确（应为数值）

## 开发者信息

- 版本：v1.2.0
- 最后更新：2025 年 5 月 19 日

## 数据图表功能

系统提供三种实时更新的数据图表：

- **温度图表**：显示过去时间段内的温度变化趋势，以摄氏度为单位
- **湿度图表**：显示过去时间段内的湿度变化趋势，以相对湿度百分比为单位
- **噪音图表**：显示过去时间段内的噪音水平变化，以分贝为单位

图表特性：

- 时间轴自动调整，显示最近的数据点
- Y 轴会根据数据范围动态调整，确保数据变化明显可见
- 每 5 分钟标记一个时间点
- 数据点最多保存 60 个点的历史记录

## 系统架构

![系统架构图](../screenshots/dashboard_concept.png)

### 核心组件：

1. **MQTT 数据接收器**：订阅多个话题，实时接收传感器数据
2. **数据处理模块**：解析、验证和转换各类传感器数据
3. **图形用户界面**：基于 Tkinter 的大屏显示界面
4. **数据可视化**：实时更新的图表和数值显示
5. **AI 智能建议**：根据环境数据提供智能建议
6. **测试数据生成器**：可独立运行的测试数据模拟模块

## 定制与扩展

### 添加新传感器：

1. 在 `MQTT_TOPICS` 中添加新的 MQTT 主题
2. 在 `update_sensor_data` 方法中添加对应的处理逻辑
3. 创建相应的界面组件显示新数据

### 自定义界面：

- 通过修改 UI 常量部分可调整颜色、大小等界面元素
- 可以在 `create_header` 和 `create_panels` 方法中添加新的界面组件

---

_备注：系统同时支持真实数据和模拟数据，适用于实际生产环境和演示环境。智能环境建议算法可根据学校需求进一步定制。_
