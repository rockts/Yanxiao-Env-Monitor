# -*- coding: utf-8 -*-
# =============================================================================
# 智慧校园仪表盘系统 - 优化版本
# 
# 优化记录：
# 1. 图表更新逻辑改进：修复了self.last_chart_update为None时的TypeError问题
# 2. UV风险等级处理增强：特殊处理"siot/uv风险等级"主题，防止未处理警告
# 3. 错误处理机制优化：改进了未处理主题的日志和尝试自动匹配
# 4. 内存管理功能：添加了定期内存清理功能，防止长时间运行时的内存泄漏
# 5. 视频帧处理稳定性改进：增加了视频帧计数和时间戳跟踪
# 6. 系统状态监控：实现了自动检测MQTT连接、传感器数据和视频流状态
# 7. 简化重连逻辑：优化了MQTT断开重连的处理，减少资源占用
# 8. 增强的UI反馈：系统状态变化会即时反映在界面上
# 9. 数据处理增强：支持多种格式的传感器数据解析（JSON、文本、百分比等）
# 10. 模拟模式改进：长时间未接收数据时可自动切换到模拟模式
# =============================================================================

print("脚本开始执行...") # DEBUG: Script start

# 导入必要的库
# 添加日志功能
import logging
import os
from datetime import datetime

# 创建日志目录
script_dir = os.path.dirname(os.path.abspath(__file__))
base_dir = os.path.dirname(script_dir)
log_dir = os.path.join(base_dir, "logs")
if not os.path.exists(log_dir):
    try:
        os.makedirs(log_dir)
        print(f"成功创建日志目录: {log_dir}")
    except Exception as e:
        print(f"无法创建日志目录: {e}")
        # 如果无法创建目录，使用当前目录
        log_dir = script_dir
        print(f"将使用当前目录进行日志记录: {log_dir}")

# 配置日志
try:
    log_file = os.path.join(log_dir, f"dashboard_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )
    logging.info("智慧校园仪表盘启动")
    print(f"日志文件将保存到: {log_file}")
except Exception as e:
    print(f"配置日志时出错: {e}")
    # 降级到只有控制台输出的日志配置
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s',
        handlers=[
            logging.StreamHandler()
        ]
    )
    logging.warning("无法配置文件日志，仅使用控制台日志输出")

# 确保导入json库
# 用于Basic Authentication
# 用于URL编码Topic
# 用于MQTT通信
try:
    from PIL import Image, ImageTk, UnidentifiedImageError
    PIL_AVAILABLE = True
